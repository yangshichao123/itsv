<?xml version="1.0" encoding="UTF-8"?>
<!-- status=debug 可以查看log4j的装配过程 -->
<!-- 优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL。 -->
<configuration status="info" monitorInterval="1800">
    <properties>
        <property name="LOG_HOME">log</property>
        <!-- 日志备份目录 -->
        <property name="BACKUP_HOME">${LOG_HOME}/backup</property>
        <property name="SERVER_NAME">mu</property>
    </properties>

    <appenders>
        <!-- 定义控制台输出 -->
        <Console name="Console" target="SYSTEM_OUT" follow="true">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%logger{36}:%line] - %msg%n"/>
        </Console>


        <!-- INFO日志 -->
        <!--RollingRandomAccessFile会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingRandomAccessFile name="infoLog"
                                 fileName="${LOG_HOME}/${SERVER_NAME}_info.log"
                                 filePattern="${BACKUP_HOME}/${SERVER_NAME}_info.%d{yyyy-MM-dd-HH}.log.gz">
            <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="ACCEPT"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%logger{36}:%line] - %msg%n"/>
            <Policies>
                <!--12小时或者大于100MB备份一次日志,若modulate=true，则封存时间将以0点为边界进行偏移计算-->
                <TimeBasedTriggeringPolicy interval="24" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingRandomAccessFile>
        <!-- ERROR日志 -->
        <RollingRandomAccessFile name="errorLog"
                                 fileName="${LOG_HOME}/${SERVER_NAME}_error.log"
                                 filePattern="${BACKUP_HOME}/${SERVER_NAME}_error.%d{yyyy-MM-dd-HH}.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%logger{36}:%line] - %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="24" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingRandomAccessFile>

        <!-- 日志记录保存到数据库 -->
        <!-- <JDBC name="databaseAppender" tableName="anxin.application_log">
              <DataSource jndiName="java:/comp/env/jdbc/LoggingDataSourceOL" />
              <Column name="EVENT_DATE" isEventTimestamp="true" />
              <Column name="LEVEL" pattern="%level" />
              <Column name="LOGGER" pattern="%logger" />
              <Column name="MESSAGE" pattern="%message" />
              <Column name="THROWABLE" pattern="%ex{full}" />
        </JDBC> -->
    </appenders>

    <loggers>
        <logger name="org.springframework.core" level="warn"></logger>
        <logger name="org.springframework.beans" level="warn"></logger>
        <logger name="org.springframework.context" level="warn"></logger>
        <logger name="org.springframework.web" level="warn"></logger>
        <logger name="org.springframework.aop" level="warn"></logger>

        <logger name="com.alibaba.druid" level="warn"></logger>

        <logger name="org.apache.http" level="warn"></logger>


        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.mybatis" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>


        <!-- Root Logger -->
        <!-- 如果一个类的log没有在loggers中明确指定其输出lever与格式，那么就会采用root中定义的格式 -->
        <!-- <root level="INFO"> 
        	<AppenderRef ref="infoLog"/> 
            <AppenderRef ref="errorLog"/>
            <AppenderRef ref="databaseAppender"/>
        </root> -->
        <root level="DEBUG">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="infoLog"/>
            <AppenderRef ref="errorLog"/>
        </root>
    </loggers>
</configuration>