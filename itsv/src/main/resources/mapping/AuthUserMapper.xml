<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.data.itsv.mapper.AuthUserMapper">
  <resultMap id="BaseResultMap" type="com.data.itsv.model.AuthUser">
    <id column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="CREATE_WHERE" jdbcType="TINYINT" property="createWhere" />
  </resultMap>
  <sql id="Base_Column_List">
    `uid`, username, `password`, salt, real_name, avatar, phone, email, sex, `status`, 
    CREATE_TIME, UPDATE_TIME, CREATE_WHERE
  </sql>
  <select id="selectByPrimaryId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from auth_user
    where `uid` = #{uid,jdbcType=VARCHAR}
  </select>
  <insert id="insert" parameterType="com.data.itsv.model.AuthUser">
    insert into auth_user (`uid`, username, `password`, 
      salt, real_name, avatar, 
      phone, email, sex, 
      `status`, CREATE_TIME, UPDATE_TIME, 
      CREATE_WHERE)
    values (#{uid,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{salt,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, 
      #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createWhere,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.data.itsv.model.AuthUser">
    insert into auth_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        `uid`,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="realName != null">
        real_name,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="createWhere != null">
        CREATE_WHERE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createWhere != null">
        #{createWhere,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>


  <select id="selectUserRoles" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT GROUP_CONCAT(rol.CODE) AS Roles
    FROM auth_user usr
    JOIN auth_user_role uro ON usr.uid = uro.USER_ID
    JOIN auth_role rol ON uro.ROLE_ID = rol.ID
    WHERE usr.uid = #{uid,jdbcType=VARCHAR}
  </select>

  <select id="selectByUniqueKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT uid, username, password, salt, real_name, avatar, phone, email, sex, status, CREATE_TIME,
    UPDATE_TIME, CREATE_WHERE
    FROM auth_user user
    WHERE user.uid = #{appId,jdbcType=VARCHAR} or user.phone = #{appId,jdbcType=VARCHAR} or user.email = #{appId,jdbcType=VARCHAR}
  </select>

  <select id="selectUserList" resultMap="BaseResultMap">
    select uid,username,"" as password,"" as salt,real_name,avatar,phone,email,sex,status,create_time,update_time,create_where
    from auth_user
  </select>

  <select id="selectUserListByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.uid,b.username,"" as password,"" as salt,b.real_name,b.avatar,b.phone,b.email,b.sex,b.status,b.create_time,b.update_time,b.create_where
    from auth_user_role a
    join auth_user b on a.user_id = b.uid
    where a.role_id = #{roleId}
  </select>

  <select id="selectUserListExtendByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.uid,b.username,"" as password,"" as salt,b.real_name,b.avatar,b.phone,b.email,b.sex,b.status,b.create_time,b.update_time,b.create_where
    from auth_user b
	where not exists (
  	   select 1 from auth_user_role c
  	   where b.uid = c.user_id and c.role_id = #{roleId,jdbcType=INTEGER}
	)
  </select>

</mapper>