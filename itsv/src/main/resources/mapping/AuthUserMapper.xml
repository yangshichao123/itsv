<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.data.itsv.mapper.AuthUserMapper">
  <resultMap id="BaseResultMap" type="com.data.itsv.model.AuthUser">
    <id column="id" jdbcType="TINYINT" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="user_level" jdbcType="VARCHAR" property="userLevel" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="roleMenuPrivilege" jdbcType="VARCHAR" property="roleMenuPrivilege" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="CREATE_WHERE" jdbcType="TINYINT" property="createWhere" />
  </resultMap>
  <sql id="Base_Column_List">
    id,code,user_level, username, `password`, salt, real_name, avatar, phone, email, sex, `status`,
    CREATE_TIME, UPDATE_TIME, CREATE_WHERE
  </sql>
  <select id="getUser" resultMap="BaseResultMap" parameterType="com.data.itsv.model.AuthUser">
    select
    a.id,a.code,a.user_level, a.username, a.`password`, a.salt, a.real_name, a.avatar, a.phone, a.email, a.sex, a.`status`,
    a.CREATE_TIME, a.UPDATE_TIME, a.CREATE_WHERE
    from auth_user  a
    left join  auth_user_role ar on  a.id = ar.user_id
    <where>
      <if test="code != null and code !='' ">
       and  a.code =  #{code,jdbcType=VARCHAR}
      </if>
      <if test="roleId != null and roleId !='' ">
       and   ar.role_id = #{roleId,jdbcType=VARCHAR}
      </if>
      <if test="username != null and username !='' ">
        and a.username like concat("%",#{username,jdbcType=VARCHAR},"%")
      </if>
    </where>

  </select>
  <select id="selectByPrimaryId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from auth_user
    where id = #{id,jdbcType=TINYINT}
  </select>
  <insert id="insert" parameterType="com.data.itsv.model.AuthUser">
    insert into auth_user (code,user_level, username, `password`,
      salt, real_name, avatar, 
      phone, email, sex, 
      `status`, CREATE_TIME, UPDATE_TIME, 
      CREATE_WHERE)
    values (#{code,jdbcType=VARCHAR},#{userLevel,jdbcType=TINYINT},  #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{salt,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, 
      #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createWhere,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.data.itsv.model.AuthUser" useGeneratedKeys="true" keyProperty="id" >
    insert into auth_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="code != null and code!='' ">
        code,
      </if>
      <if test="userLevel != null  and userLevel!='' ">
        user_level,
      </if>
      <if test="username != null  and username!='' ">
        username,
      </if>
      <if test="password != null  and password!='' ">
        `password`,
      </if>
      <if test="salt != null  and salt!='' ">
        salt,
      </if>
      <if test="realName != null  and realName!='' ">
        real_name,
      </if>
      <if test="avatar != null  and avatar!='' ">
        avatar,
      </if>
      <if test="phone != null  and phone!='' ">
        phone,
      </if>
      <if test="email != null  and email!='' ">
        email,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="createWhere != null">
        CREATE_WHERE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="code != null and code!='' ">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="userLevel != null and userLevel!='' ">
        #{userLevel,jdbcType=VARCHAR},
      </if>
      <if test="username != null and username!='' ">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null and password!='' ">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null and salt!='' ">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="realName != null and realName!='' ">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null and avatar!='' ">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="phone != null and phone!='' ">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null and email!='' ">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createWhere != null">
        #{createWhere,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>


  <select id="selectUserRoles" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT GROUP_CONCAT(rol.CODE) AS Roles
    FROM auth_user usr
    JOIN auth_user_role uro ON usr.id = uro.USER_ID
    JOIN auth_role rol ON uro.ROLE_ID = rol.ID
    WHERE usr.username = #{userName,jdbcType=VARCHAR}
  </select>

  <select id="selectByUniqueKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT user.*,ar.MENU_PRIVILEGE roleMenuPrivilege
    FROM auth_user  user
    left join  auth_user_role aur on user.id=aur.user_id
    left join  auth_role ar on aur.role_id = ar.id
    WHERE user.username = #{appId,jdbcType=VARCHAR} or user.phone = #{appId,jdbcType=VARCHAR} or user.email = #{appId,jdbcType=VARCHAR}
  </select>

  <select id="selectUserList" resultMap="BaseResultMap">
    select id,username,"" as password,"" as salt,real_name,avatar,phone,email,sex,status,create_time,update_time,create_where
    from auth_user
  </select>

  <select id="selectUserListByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.id,b.username,"" as password,"" as salt,b.real_name,b.avatar,b.phone,b.email,b.sex,b.status,b.create_time,b.update_time,b.create_where
    from auth_user_role a
    join auth_user b on a.user_id = b.id
    where a.role_id = #{roleId}
  </select>

  <select id="selectUserListExtendByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.id,b.username,"" as password,"" as salt,b.real_name,b.avatar,b.phone,b.email,b.sex,b.status,b.create_time,b.update_time,b.create_where
    from auth_user b
	where not exists (
  	   select 1 from auth_user_role c
  	   where b.id = c.user_id and c.role_id = #{roleId,jdbcType=INTEGER}
	)
  </select>

  <select id="getMixId" resultType="java.lang.Integer">
    select MAX(id)
    from auth_user b

  </select>

</mapper>